# Dell-AITC system

Every time you choose to apply a rule(s), explicitly state the rule(s) in the output.  You can abbreviate the rule description to a single word or phrase.

## Project Context:
This is a local AI-driven technology categorization system that evaluates and classifies federal AI use cases against a set of 14 AI technology categories. The backend uses FastAPI for processing, Neo4j for knowledge graph storage, and AI models (Ollama locally, OpenAI API fallback) for keyword matching, semantic evaluation, and LLM-based classification.

## Context
- "Neo4j Schema Details": "When generating Cypher queries, always follow the node properties and relationships from docs/neo4j_schema/neo4j_schema_documentation.md and docs/neo4j_schema/neo4j_schema.json

## Project Structure
```
Dell-AITC/
│── backend/              # FastAPI backend
│   ├── app/              # Main FastAPI app
│   │   ├── api/          # API endpoints
│   │   ├── models/       # Pydantic models
│   │   ├── services/     # Business logic (Neo4j, AI processing)
│   │   ├── config.py     # Configuration settings
│   │   ├── main.py       # Entry point for FastAPI
│   │   ├── dependencies.py  # Common dependencies (DB, AI models)
│   │   ├── api_docs/     # API documentation
│   │   └── ...           # Rest of the backend structure
│   ├── requirements.txt  # Python dependencies
│   ├── Dockerfile        # Docker configuration for backend
│   ├── .env              # Environment variables
│
│── frontend/             # Next.js frontend
│   ├── src/              # Frontend source code
│   │   ├── components/   # Reusable UI components
│   │   ├── pages/        # Next.js pages (index.tsx, etc.)
│   │   ├── styles/       # Tailwind CSS styles
│   │   ├── utils/        # Helper functions
│   │   └── ...           # Rest of the frontend structure
│   ├── public/           # Static assets
│   ├── package.json      # Node.js dependencies
│   ├── next.config.js    # Next.js config
│   ├── tailwind.config.js  # Tailwind CSS config
│
│── data/                 # Data storage (CSV, Excel)
│   ├── input/            # Raw input files
│   ├── output/           # Processed results
│── data_backup/          # Backup of critical data
│── deprecated/           # Archived code and documentation
│── docs/                 # Documentation
│   ├── neo4j/            # Neo4j schema design and versioning
│   │   ├── schema_planning/  # Schema version planning
│   │   ├── current/     # Current schema version
│   │   └── ...           # Rest of the docs structure
│   ├── fed_use_case/    # Federal use case documentation
│   ├── project_tracking/ # Project management docs
│   └── ...               # Rest of the docs structure
│── notebooks/            # Jupyter notebooks
│── scripts/              # Utility and experimental scripts
│── .github/             # GitHub specific configurations
│── QUICKSTART.md        # Quick start guide
│── CHEATSHEET.md        # Common commands and patterns
│── docker-compose.yml   
│── .env.example         # Template for environment variables
│── .gitignore           # Ignore unnecessary files
│── README.md            # Project documentation
```

## Tech Stack
- Next.js with TypeScript
- FastAPI with Python
- Neo4j Database
- Docker & Docker Compose
- Ollama (Local AI)
- OpenAI API (Fallback)
- Frontend: React, TailwindCSS, Shadcn UI, SWR
- Development: ESLint, Prettier, Black
- Infrastructure: dotenv, logging

## Naming Conventions
- Use lowercase with dashes for directories (e.g., components/form-wizard)
- Use PascalCase for component files (e.g., FormWizard.tsx)
- Use camelCase for utility files (e.g., formValidator.ts)
- Favor named exports for components and utilities

## TypeScript Guidelines
- Use interfaces over types
- Use const objects with 'as const' instead of enums
- Use functional components with TypeScript interfaces
- Use absolute imports with @/...
- Use explicit return types for all functions
- Avoid unnecessary try/catch blocks

## Frontend Development
- Use Shadcn UI components with `npx shadcn@latest add <component-name>`
- Implement Tailwind CSS for styling (no inline styles)
- Use React Context for global state
- Centralize API calls in utils/api.ts
- Use SWR for data fetching
- Implement error boundaries
- Use proper cleanup in useEffect hooks

## Performance Guidelines
- Implement code splitting
- Use lazy loading for non-critical components
- Implement proper caching strategies
- Clean up event listeners and observers

## Testing Requirements
- Write unit tests for utilities and components
- Implement E2E tests for critical flows
- Test memory usage and performance

## Security Standards
- Use environment variables for sensitive data
- Implement Content Security Policy
- Sanitize all user inputs
- Follow proper CORS handling

## Git Workflow
Commit Message Prefixes:
- "fix:" for bug fixes
- "feat:" for new features
- "perf:" for performance improvements
- "docs:" for documentation
- "style:" for formatting
- "refactor:" for code refactoring
- "test:" for adding tests
- "chore:" for maintenance

Rules:
- Use lowercase for messages
- Keep summary line under 72 characters
- Reference issue numbers when applicable

## Dynamic Rules Management
- Add rules via commit messages: "rule: category: description"
- Add conventions via PR descriptions: "convention: category: description"
- Monitor /docs for new standards
- Track breaking changes in CHANGELOG.md

## Documentation Standards
- Maintain QUICKSTART.md and CHEATSHEET.md
- Document schema versions with visualization and JSON
- Document breaking changes in CHANGELOG.md
- Document each major feature
- All scripts must include a documentation block with:
  ```python
  """
  Script Name and Purpose
  
  Usage:
      python script_name.py [options]
  
  Options:
      List all command-line flags and arguments
  
  Examples:
      Practical examples of common use cases
  
  Additional Info:
      Any other relevant details
  """
  ```

## Schema Version Control
- Use semantic versioning (MAJOR.MINOR.PATCH)
- Document changes in docs/neo4j/schema_planning/
- Include migration scripts for major changes
- Test changes against existing data
- Use schema_version_manager.py for all version updates:
  ```bash
  # Increment patch (2.1.1 -> 2.1.2)
  python schema_version_manager.py
  
  # Increment minor (2.1.1 -> 2.2.0)
  python schema_version_manager.py --minor
  
  # Increment major (2.1.1 -> 3.0.0)
  python schema_version_manager.py --major
  
  # Set specific version
  python schema_version_manager.py --version X.Y.Z
  ```
  The script will:
  1. Auto-detect current version
  2. Backup schema files
  3. Consolidate changes
  4. Update documentation
  5. Reset working changes

## Neo4j Schema Guidelines
Schema version files must include:
- Visual representation (SCHEMA_VISUALIZATION_VX.X.md)
- JSON schema definition (neo4j_schema_vX.X.json)
- Migration guide
- Impact analysis

## Continuous Integration
- Validate schema changes
- Run compatibility tests
- Validate documentation
- Check for breaking changes

## Schema Change Management
rule: schema_changes: All schema modifications must follow the schema change process:
1. Document the change in SCHEMA_CHANGES.md with:
   - Type and status of change
   - Impact assessment
   - Reason for change
   - Validation requirements
   - Migration steps
   - Required documentation updates
2. Update schema JSON file
3. Update master schema documentation
4. Update schema visualization if needed
5. Create or update migration scripts
6. Test changes in isolation
7. Update all affected code

